# what kind of datasets are available?

data()

# Example 1 DNase Dataset

data(DNase) #Elisa assay of DNase

help(DNase)
names(DNase)
summary(DNase)

## View example from the dataset help page

require(stats); require(graphics)

coplot(density ~ conc | Run, data = DNase,
       show.given = FALSE, type = "b")
coplot(density ~ log(conc) | Run, data = DNase,
       show.given = FALSE, type = "b")
## fit a representative run
fm1 <- nls(density ~ SSlogis( log(conc), Asym, xmid, scal ),
           data = DNase, subset = Run == 1)
## compare with a four-parameter logistic
fm2 <- nls(density ~ SSfpl( log(conc), A, B, xmid, scal ),
           data = DNase, subset = Run == 1)
summary(fm2)
anova(fm1, fm2)


library("ggplot2")

# simple plot

ggplot(aes(x=conc, y=density), data=DNase) +
  geom_point(aes(color=Run)) 


ggplot(aes(x=conc, y=density), data=DNase) +
  geom_point(aes(color=Run)) +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm", se=TRUE, color="black", formula = y ~ x) 

# add equation and r^2 

df <- DNase
df$y <- log10(DNase$density)
df$x <- log10(DNase$conc)
m <- lm(y ~ x, data = df)
summary(m)


p <- ggplot(aes(x=log10(conc), y=log10(density)), data=DNase) +
  geom_point(aes(color=Run)) +
  geom_smooth(method = "lm", se=TRUE, color="black", formula = y ~ x) 


eq <- substitute("log10(density)"~"="~a + b %.% "log10(conc)"*","~~italic(r)^2~"="~r2,
                 list(        a = format(coef(m)[1], digits = 4),
                              b = format(coef(m)[2], digits = 4),
                              r2 = format(summary(m)$r.squared, digits = 3)))

dftext <- data.frame(eq = as.character(as.expression(eq)))
p + geom_text(aes(label = eq), data = dftext, parse = TRUE, x = -0.5, y = 0.3, position = "identity")



# mtcars dataset -> used for a lot of examples online

data(mtcars)
names(mtcars)
summary(mtcars)
help(mtcars)

# Examples
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
       panel = panel.smooth, rows = 1)

# getting overview
pairs(mtcars)

# create heatmap
# http://www.r-bloggers.com/drawing-heatmaps-in-r/
# scale data to mean=0, sd=1 and convert to matrix
mtscaled <- as.matrix(scale(mtcars))

# create heatmap and don't reorder columns
heatmap(mtscaled, Colv=F, scale='none')


# analyse domestic vs import
# http://www.r-bloggers.com/using-r-for-introductory-statistics-chapter-4/
# make a copy of mtcars 'cause we're going to add a column
cars <- mtcars

# add origin column as a factor to cars data frame
imports <- c(1:3, 8:14, 18:21, 26:28, 30:32)
origin <- rep("domestic", nrow(mtcars))
origin[imports] <- "import"
cars$origin <- factor(origin, levels=c('import', 'domestic'))

# make a vector of colors to color the data points
us.col <- rgb(0,0,255,192, maxColorValue=255)
im.col <- rgb(0,255,0,192, maxColorValue=255)
col <- rep(us.col, nrow(cars))
col[imports] <- im.col

# set up a two panel plot
par(mfrow=c(1,2))
par(mar=c(5,4,5,1)+0.1)

# draw boxplot in first panel
boxplot(mpg ~ origin, data=cars, col=c(im.col, us.col), outpch=19, outcol=c(us.col, im.col), ylab="mpg")
grid(nx=NA, ny=NULL)

# draw scatterplot in second panel
par(mar=c(5,0.5,5,2)+0.1)
plot(mpg~wt, data=cars, col=col, yaxt='n', pch=as.character(cars$cyl), xlab="weight (thousands of lbs)")
grid(nx=NA, ny=NULL)

# fit a line describing mpg as a function of weight
res <- lm(mpg ~ wt, data=cars)
abline(res, col=rgb(255,0,0,64, maxColorValue=255), lty=2)

# return parameters to defaults
par(mar=c(5,4,4,2)+0.1)
par(mfrow=c(1,1))
